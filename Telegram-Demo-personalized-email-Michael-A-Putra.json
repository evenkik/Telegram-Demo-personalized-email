{
  "name": "Demo Email to Share",
  "nodes": [
    {
      "parameters": {
        "updates": [
          "message"
        ],
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.telegramTrigger",
      "typeVersion": 1.2,
      "position": [
        -384,
        624
      ],
      "id": "f5543636-85b1-4fc0-a249-a24c89c28a7e",
      "name": "Telegram Trigger",
      "webhookId": "e14bd24d-3207-413d-ada5-8898cfe97b84",
      "credentials": {
        "telegramApi": {
          "id": "w3Cax7qO9QavQmz5",
          "name": "Email Demo EN"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "f334ff6c-3501-4199-8763-a1646c6386e4",
              "name": "Name",
              "value": "={{ $('Code in JavaScript').item.json.name }}",
              "type": "string"
            },
            {
              "id": "d413b489-746e-43fd-ab2e-6e0a25fc05aa",
              "name": "Website",
              "value": "=https://{{ $('Code in JavaScript').item.json.website }}",
              "type": "string"
            },
            {
              "id": "25471945-5ebc-4a7e-ae7f-4befae7d88fd",
              "name": "Receive_Email",
              "value": "={{ $('Code in JavaScript').item.json.email }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1520,
        288
      ],
      "id": "11c0072b-8f85-42af-a5bb-7ea0e0534ea6",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "url": "={{ $json.Website }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2176,
        528
      ],
      "id": "9bd90f31-1d1d-4042-8405-790a00e4a344",
      "name": "HTTP Request",
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "html": "={{ $json.data }}",
        "options": {}
      },
      "type": "n8n-nodes-base.markdown",
      "typeVersion": 1,
      "position": [
        2400,
        432
      ],
      "id": "d98093eb-aa44-40ed-8f8c-02a836b07082",
      "name": "Markdown"
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "gpt-4o-mini",
          "mode": "list",
          "cachedResultName": "GPT-4O-MINI"
        },
        "messages": {
          "values": [
            {
              "content": "you're a helpfull, intelligent web scraper asisstant."
            },
            {
              "content": "=Your task is to extract all URLs from the raw markdown data of a website.\n\nRules:\n\nAlways include both absolute URLs (e.g., https://example.com/page) and relative PHP links (e.g., index.php, about.php).\n\nIf the URL is relative, prepend the base domain {{ $('Edit Fields').item.json.Website }} to make it absolute.\n\nIgnore anchor-only links (e.g., #, ?lang=).\n\nOutput should be a simple list, one URL per line.\n\nOutput format example:\n\nhttps://www.Example.com/index\nhttps://www.Example.com/vision-mission.php\nhttps://www.Example.com/our-leadership.php\nhttps://www.Example.com/our-history"
            },
            {
              "content": "={{ $json.data }}"
            }
          ]
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        2720,
        400
      ],
      "id": "43db5cdf-c940-42f3-aeb4-4707f871f4b8",
      "name": "getting link",
      "credentials": {
        "openAiApi": {
          "id": "8814JRU0x3fI9btT",
          "name": "evenkik4"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "fieldToSplitOut": "message.content.BestLinks",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        3552,
        400
      ],
      "id": "b4005b51-ce73-42a9-97f1-8e8a8614cdee",
      "name": "Split Out",
      "alwaysOutputData": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "url": "={{ $json['message.content.BestLinks'] }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        3776,
        400
      ],
      "id": "1e723bb4-fe00-4d23-b94c-3393a5919b78",
      "name": "HTTP Request1",
      "retryOnFail": false,
      "alwaysOutputData": false,
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "html": "={{ $json.data }}",
        "options": {}
      },
      "type": "n8n-nodes-base.markdown",
      "typeVersion": 1,
      "position": [
        4224,
        208
      ],
      "id": "34ebbd2e-4225-42f2-b33a-6c0fa060ca39",
      "name": "Markdown1",
      "alwaysOutputData": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "gpt-4o-mini",
          "mode": "list",
          "cachedResultName": "GPT-4O-MINI"
        },
        "messages": {
          "values": [
            {
              "content": "you 're a helpfull, intelligent web scrapper assistant.",
              "role": "system"
            },
            {
              "content": "You are given a markdown scrape of a website page.\nYour task is to write a one-paragraph abstract summarizing what this page is about.\nPrioritize identifying the company’s featured products, their current market condition, and any implied beliefs or values.\nIf these details are missing, still provide the best possible abstract based on the available content.\n\nReturn in JSON format:\n\n{\"abstract\": \"your abstract goes here\"}\n\n\nRules:\n\n-The abstract should be comprehensive, similar in detail to an abstract of a published paper.\n-Prefer extracting specific, concrete products rather than broad categories. For example: use \"coconut shell\" or \"copra\" instead of just \"coconut\". another examples: Use \"ginger\" or \"cinnamon\" instead of a vague term like \"healthy spices\".\n-Use a straightforward, Spartan tone of voice.\n-If the page has no content, return \"no content\"."
            },
            {
              "content": "={{ $json.flattext && $json.flattext.length > 5000 ? $json.flattext.slice(0, 5000) : $json.flattext }}\n"
            }
          ]
        },
        "jsonOutput": true,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        5120,
        304
      ],
      "id": "69b856ea-87a4-4eb1-a3d2-3c980e03d1a0",
      "name": "Page Sumarize",
      "credentials": {
        "openAiApi": {
          "id": "8814JRU0x3fI9btT",
          "name": "evenkik4"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "fieldsToAggregate": {
          "fieldToAggregate": [
            {
              "fieldToAggregate": "message.content.abstract"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        5472,
        304
      ],
      "id": "123f6919-ea53-4a16-a5dd-34951012e0b6",
      "name": "Aggregate",
      "alwaysOutputData": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "fromEmail": "={{ 'Michael <' + $json.Send_Email + '>' }}",
        "toEmail": "={{ $json.receive_email }}",
        "subject": "={{ $json.subject_line }}",
        "html": "={{ $json.Body }}{{ $json.Signature }}",
        "options": {
          "appendAttribution": false
        }
      },
      "type": "n8n-nodes-base.emailSend",
      "typeVersion": 2.1,
      "position": [
        6272,
        304
      ],
      "id": "a572ae39-d493-4478-b12d-b45e51ef6516",
      "name": "Send email",
      "webhookId": "53eb06c8-9518-4d90-aacb-7e17282df080",
      "credentials": {
        "smtp": {
          "id": "Sfcl1WZddA4WKPtk",
          "name": "sparkpost new"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "gpt-5-mini",
          "mode": "list",
          "cachedResultName": "GPT-5-MINI"
        },
        "messages": {
          "values": [
            {
              "content": "you're a helpful, intelligent sales asisstant.",
              "role": "system"
            },
            {
              "content": "We just scraped a series of web pages from a business.\nYour task is to take their summaries and turn them into catchy, personalized openers for a cold email campaign, designed to imply that the rest of the campaign is also personalized.\n\nYou'll return your icebreakers in the following text format:\n\n{\"Subject\"={created subject here\",\"Body\"= <div style=\"font-family: Arial, sans-serif; line-height: 1.6; color: #333;\">\n  <p>Dear <strong>{name}</strong>,</p>\n\n  <p>\n    I noticed that your team supports organizations in <strong>{scraped_solution_area}</strong> \n    through <strong>{scraped_solution_name_or_method}</strong>, \n    addressing <strong>{scraped_problem_they_solve}</strong>, which many companies in {your_target_industry} also face.\n  </p>\n\n  <p>\n    We have developed a new concept that we believe could be a good fit for collaboration.\n  </p>\n\n  <p>\n    Over the past few months, we have been working on a concept that seems to help companies like yours. \n    In short, it is an AI-based outreach (lead generation) system \n    that helps find clients both in Indonesia and abroad, \n    and then creates customized proposal emails for each client — \n    for example, connecting your <strong>{scraped_solution_area}</strong> solution \n    to companies currently facing <strong>{scraped_problem_they_solve}</strong>.\n  </p>\n\n  <p>\n    The cost is very low, and the conversion rate is very high. We believe this aligns with \n    <strong>{SomeImpliedBeliefTheyHave}</strong>.\n  </p>\n\n  <p>\n    Interested? If you agree, we can send you a link to schedule a meeting. \n    Does that sound good to you?\n  </p>\n</div>\n\n\nRules:\n\nWrite in a natural, friendly, but formal tone of voice.\n\nMake sure to use the above format when constructing your icebreakers — we wrote it this way on purpose.\n\nFor {scraped_solution_name_or_method}\nShorten the solution name.\nExample: Use Managed WordPress instead of Managed WordPress (DreamPress)\nUse Liftoff instead of Liftoff (AI website builder)\nUse XYZ instead of XYZ Company Inc.\n\nRules for {your_target_industry}\nMake it specific (general → sub-industry/product).\nConvert tools/services → user industry.\nNo company names (inc, pt, etc.).\nKeep it 2–4 words.\nExample: coconut to coconut cream industry, website to growing IT company, press machine to ceramic factory.\n\nFor {SomeImpliedBeliefTheyHave}\nRefer to goals or ambitions, not formal values.\nUse casual phrasing like focus on, aim to, trying to.\nKeep it short (7–10 words).\nAvoid corporate buzzwords or brand slogans.\nUse […this aligns with your focus on expanding into new markets.] instead of […this aligns with your commitment to quality and sustainability.]"
            },
            {
              "content": "=here is some imformation that you will need\nname:{{ $('Edit Fields').item.json.Name }}"
            },
            {
              "content": "={{ $json.abstract.join(\"/n\") }}"
            }
          ]
        },
        "jsonOutput": true,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        5696,
        304
      ],
      "id": "86f377a6-b51e-4eaf-94c3-c2d783401319",
      "name": "Email Craft",
      "credentials": {
        "openAiApi": {
          "id": "8814JRU0x3fI9btT",
          "name": "evenkik4"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "operation": "deleteRows",
        "dataTableId": {
          "__rl": true,
          "value": "lUt0VsvPO063mnyQ",
          "mode": "list",
          "cachedResultName": "demo log",
          "cachedResultUrl": "/projects/ty2N3FKN04d75oM7/datatables/lUt0VsvPO063mnyQ"
        },
        "matchType": "allConditions",
        "filters": {
          "conditions": [
            {
              "condition": "isNotEmpty"
            }
          ]
        },
        "options": {
          "dryRun": false
        }
      },
      "type": "n8n-nodes-base.dataTable",
      "typeVersion": 1,
      "position": [
        64,
        0
      ],
      "id": "dec239f6-fceb-4454-b8ab-67d97de955cd",
      "name": "Delete row(s)"
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {}
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        -384,
        0
      ],
      "id": "10c33257-aa0d-48e3-a8e7-afdc5a7ae158",
      "name": "Schedule Trigger"
    },
    {
      "parameters": {
        "operation": "get",
        "dataTableId": {
          "__rl": true,
          "value": "lUt0VsvPO063mnyQ",
          "mode": "list",
          "cachedResultName": "demo log",
          "cachedResultUrl": "/projects/ty2N3FKN04d75oM7/datatables/lUt0VsvPO063mnyQ"
        }
      },
      "type": "n8n-nodes-base.dataTable",
      "typeVersion": 1,
      "position": [
        -160,
        0
      ],
      "id": "7dcf44c7-cc7f-433e-9d16-a2a9616bc391",
      "name": "Get row(s)1"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "8fdf339e-0d75-4c54-b6a6-218048745485",
              "leftValue": "={{ $json.message.text }}",
              "rightValue": "!",
              "operator": {
                "type": "string",
                "operation": "startsWith"
              }
            }
          ],
          "combinator": "or"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -160,
        624
      ],
      "id": "65368d29-be1f-427c-8b12-dc90987e6bc5",
      "name": "If1"
    },
    {
      "parameters": {
        "model": "gpt-4.1-mini",
        "options": {}
      },
      "id": "8b62b092-b4dd-43bd-a21f-8d6e4e004fdb",
      "name": "OpenAI Chat Model",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1,
      "position": [
        32,
        992
      ],
      "credentials": {
        "openAiApi": {
          "id": "8814JRU0x3fI9btT",
          "name": "evenkik4"
        }
      }
    },
    {
      "parameters": {},
      "id": "dbd37933-28fd-4c13-aa8f-bc3abe7f5805",
      "name": "Postgres Chat Memory",
      "type": "@n8n/n8n-nodes-langchain.memoryPostgresChat",
      "typeVersion": 1,
      "position": [
        160,
        992
      ],
      "notesInFlow": false,
      "credentials": {
        "postgres": {
          "id": "jWzoXtdPKpDtut1V",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.chatInput }}",
        "options": {
          "systemMessage": "You are Demo Assistant.  \n\nWhen a new user arrives:  \n1) Introduce yourself,  \n2) Give instruction to fill a form using the template\n3) Fetch and present the input form template using RAG,  \n4) Explain what the bot will do, and  \n5) Display any important notes.  \n\nForm generation rules:  \n- Always fetch the form template from RAG.  \n- Must start with !FORM.  \n- Exactly 3 lines: Name, Email (valid), Website (domain only, no http/https).  \n- No extra text, formatting, or explanations outside the form.  \n- If user input is wrong or incomplete: ask for missing info, then regenerate the correct form with their data.  \n\nIf the user is confused:  \n- Ask for their Name, Email, and Website.  \n- Fill in the form template with their answers, outputting only the ready-to-copy form.\n- After the form, tell the user: **“Please copy, paste, and send this form.”** \n- Keep replies short and easy to copy.  \n\nRAG usage rules:  \n- You are given tools to perform RAG in the 'documents' table.  \n- Use RAG first to fetch the introduction, form template, bot description, and notes.  \n- Only use SQL on the 'document_rows' table for tabular queries (sums, max, etc.) when RAG would be unreliable.  \n- If RAG doesn’t provide an answer, check available documents, analyze them, and tell the user if nothing is found.  \n- Never invent answers.  \n"
        }
      },
      "id": "82f58e56-bfb7-4ca8-be65-e51ab4d3920b",
      "name": "RAG AI Agent",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.6,
      "position": [
        272,
        768
      ]
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Use this tool to fetch all available documents, including the table schema if the file is a CSV or Excel file.",
        "operation": "select",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "document_metadata",
          "mode": "list",
          "cachedResultName": "document_metadata"
        },
        "returnAll": true,
        "options": {}
      },
      "type": "n8n-nodes-base.postgresTool",
      "typeVersion": 2.5,
      "position": [
        288,
        992
      ],
      "id": "753a19d3-dfd4-472b-9a4d-bae89b0e55b8",
      "name": "List Documents",
      "credentials": {
        "postgres": {
          "id": "jWzoXtdPKpDtut1V",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Given a file ID, fetches the text from the document.",
        "operation": "executeQuery",
        "query": "SELECT \n    string_agg(text, ' ') as document_text\nFROM documents_pg\n  WHERE metadata->>'file_id' = $1\nGROUP BY metadata->>'file_id';",
        "options": {
          "queryReplacement": "={{ $fromAI('file_id') }}"
        }
      },
      "type": "n8n-nodes-base.postgresTool",
      "typeVersion": 2.5,
      "position": [
        416,
        992
      ],
      "id": "fa0a3c9d-63c5-45ec-bd6e-70c69cf33d1b",
      "name": "Get File Contents",
      "credentials": {
        "postgres": {
          "id": "jWzoXtdPKpDtut1V",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Run a SQL query - use this to query from the document_rows table once you know the file ID you are querying. dataset_id is the file_id and you are always using the row_data for filtering, which is a jsonb field that has all the keys from the file schema given in the document_metadata table.\n\nExample query:\n\nSELECT AVG((row_data->>'revenue')::numeric)\nFROM document_rows\nWHERE dataset_id = '123';\n\nExample query 2:\n\nSELECT \n    row_data->>'category' as category,\n    SUM((row_data->>'sales')::numeric) as total_sales\nFROM dataset_rows\nWHERE dataset_id = '123'\nGROUP BY row_data->>'category';",
        "operation": "executeQuery",
        "query": "{{ $fromAI('sql_query') }}",
        "options": {}
      },
      "type": "n8n-nodes-base.postgresTool",
      "typeVersion": 2.5,
      "position": [
        544,
        992
      ],
      "id": "b51ec26a-0a56-474a-9061-60e4a11fef1f",
      "name": "Query Document Rows",
      "credentials": {
        "postgres": {
          "id": "jWzoXtdPKpDtut1V",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
      "typeVersion": 1.2,
      "position": [
        752,
        1200
      ],
      "id": "11903393-1b81-4409-b4f0-c82f0e490d5e",
      "name": "Embeddings OpenAI2",
      "credentials": {
        "openAiApi": {
          "id": "8814JRU0x3fI9btT",
          "name": "evenkik4"
        }
      }
    },
    {
      "parameters": {
        "mode": "retrieve-as-tool",
        "toolDescription": "Use RAG to look up information in the knowledgebase.",
        "tableName": "documents_pg",
        "topK": 25,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.vectorStorePGVector",
      "typeVersion": 1.3,
      "position": [
        672,
        992
      ],
      "id": "f4fd9497-f01e-42ae-8bf8-faef16ae3a6d",
      "name": "Postgres PGVector Store",
      "credentials": {
        "postgres": {
          "id": "jWzoXtdPKpDtut1V",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "9a9a245e-f1a1-4282-bb02-a81ffe629f0f",
              "name": "chatInput",
              "value": "={{ $json.message.text }}",
              "type": "string"
            },
            {
              "id": "b80831d8-c653-4203-8706-adedfdb98f77",
              "name": "sessionId",
              "value": "={{ $json.message.chat.id }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "3a8b8da3-6d18-45fd-a8d7-a300fb82adaa",
      "name": "Edit Fields5",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        112,
        768
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "3a65e649-786b-4d93-bb7f-121ed4a2233e",
              "leftValue": "={{ $json.name }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              }
            },
            {
              "id": "f7c82960-c9b2-4603-827b-680208ed8d25",
              "leftValue": "={{ $json.email }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              }
            },
            {
              "id": "ef098bcb-82a6-4a92-b5e3-be9f1660a1ee",
              "leftValue": "={{ $json.website }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1072,
        384
      ],
      "id": "d6eb2aa8-017c-4b7b-b5e6-e26cf8fd7283",
      "name": "If2"
    },
    {
      "parameters": {
        "content": "## Instructor+RAG Agent\n",
        "height": 672,
        "width": 976
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -16,
        672
      ],
      "typeVersion": 1,
      "id": "5226d39f-b833-4097-87ce-2f301f0814da",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "a2302647-5703-427b-91ec-1d0ff2bfd5ab",
      "name": "XML",
      "type": "n8n-nodes-base.xml",
      "typeVersion": 1,
      "position": [
        2176,
        208
      ]
    },
    {
      "parameters": {
        "url": "={{ $json.Website }}/sitemap.xml",
        "options": {}
      },
      "id": "0135647f-e136-43a9-b0db-c802c022d63e",
      "name": "sitemap.xml request",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1728,
        400
      ],
      "alwaysOutputData": false,
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "url": "={{ $json.Website }}/sitemap_index.xml",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1952,
        480
      ],
      "id": "b6b14a81-5267-4a41-9c47-7abadfc1d8b3",
      "name": "sitemap_index.xml request",
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=http://00.00.00.000:11235/crawl",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"urls\": [\"{{ $('Edit Fields').item.json.Website }}\"],\n  \"priority\": 10\n}",
        "options": {}
      },
      "id": "7c26fff0-e0fb-4752-9143-be5a42525e7d",
      "name": "crawl4ai",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2624,
        624
      ],
      "retryOnFail": true,
      "alwaysOutputData": true,
      "executeOnce": false,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "operation": "get",
        "dataTableId": {
          "__rl": true,
          "value": "lUt0VsvPO063mnyQ",
          "mode": "list",
          "cachedResultName": "demo log",
          "cachedResultUrl": "/projects/ty2N3FKN04d75oM7/datatables/lUt0VsvPO063mnyQ"
        },
        "filters": {
          "conditions": [
            {
              "keyName": "Telegram_id",
              "keyValue": "={{ $json.message.from.id }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.dataTable",
      "typeVersion": 1,
      "position": [
        64,
        416
      ],
      "id": "f3334eac-4ed8-4b51-a843-f7cbed070b79",
      "name": "Check how many email created by id",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "chatId": "={{ $('Telegram Trigger').item.json.message.from.id }}",
        "text": "={{ $json.output }}",
        "replyMarkup": "=none",
        "forceReply": {},
        "replyKeyboardOptions": {},
        "replyKeyboardRemove": {},
        "additionalFields": {
          "appendAttribution": false
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        576,
        768
      ],
      "id": "d8572789-5683-4b6d-a0d2-27708098afa7",
      "name": "answer query",
      "webhookId": "517399ca-8ea0-4f4c-9d73-b5e2fbac6342",
      "credentials": {
        "telegramApi": {
          "id": "w3Cax7qO9QavQmz5",
          "name": "Email Demo EN"
        }
      }
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.Telegram_id }}",
                    "rightValue": 2,
                    "operator": {
                      "type": "array",
                      "operation": "lengthGt",
                      "rightType": "number"
                    },
                    "id": "368c343e-fc6e-46f0-9e82-c50a1c2f707f"
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "3b3b9bc8-298c-4da3-9341-82e20344a82d",
                    "leftValue": "={{ $json.Telegram_id }}",
                    "rightValue": 2,
                    "operator": {
                      "type": "array",
                      "operation": "lengthLte",
                      "rightType": "number"
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.3,
      "position": [
        432,
        416
      ],
      "id": "4cdc7181-6f34-455b-81ba-fc94039faa2e",
      "name": "set maximum email per id",
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "chatId": "={{ $('Telegram Trigger').item.json.message.from.id }}",
        "text": "Thank you, but the demo can only be used up to 3 times. 😔\n",
        "replyMarkup": "=none",
        "forceReply": {},
        "replyKeyboardOptions": {},
        "replyKeyboardRemove": {},
        "additionalFields": {
          "appendAttribution": false
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        656,
        320
      ],
      "id": "cb9bc574-6dba-4654-b24f-bb5dc655610f",
      "name": "apologize message",
      "webhookId": "517399ca-8ea0-4f4c-9d73-b5e2fbac6342",
      "credentials": {
        "telegramApi": {
          "id": "w3Cax7qO9QavQmz5",
          "name": "Email Demo EN"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// --- n8n entry point ---\nconst raw = $('Telegram Trigger').first().json.message.text || '';\n\n// Split lines, trim, remove empty lines, !FORM header, and instruction line\nconst lines = raw\n  .split('\\n')\n  .map(l => l.trim())\n\n// Map to JSON keys\nconst json = {\n  name: lines[1] || '',\n  email: lines[2] || '',\n  website: lines[3] || ''\n};\n\n// Return in n8n format\nreturn [\n  {\n    json\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        880,
        384
      ],
      "id": "c9f859c0-2cab-4d92-8267-d5302a27019c",
      "name": "Code in JavaScript"
    },
    {
      "parameters": {
        "chatId": "={{ $('Telegram Trigger').item.json.message.from.id }}",
        "text": "Creating email...",
        "additionalFields": {
          "appendAttribution": false,
          "disable_notification": true
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        1296,
        288
      ],
      "id": "cb5dcd48-e2cd-48ed-a348-f368a4636cc0",
      "name": "notif email creating",
      "webhookId": "e9efec89-f4e7-4e7f-b43e-9262e89964d3",
      "credentials": {
        "telegramApi": {
          "id": "w3Cax7qO9QavQmz5",
          "name": "Email Demo EN"
        }
      }
    },
    {
      "parameters": {
        "chatId": "={{ $('Telegram Trigger').item.json.message.from.id }}",
        "text": "=Missing Input please use this template...\n!FORM\nname\nemail (valid format)\nwebsite (domain only, no http/https)",
        "additionalFields": {
          "appendAttribution": false,
          "disable_notification": true
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        1296,
        480
      ],
      "id": "4106b03d-4cfb-499a-afff-43edf7246610",
      "name": "missing input notif",
      "webhookId": "e9efec89-f4e7-4e7f-b43e-9262e89964d3",
      "credentials": {
        "telegramApi": {
          "id": "w3Cax7qO9QavQmz5",
          "name": "Email Demo EN"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Get the input array safely\nconst urlArray = $input.first().json.urlset?.url || [];\n\n// Extract all loc values\nconst locLinks = urlArray.map(item => item.loc).filter(Boolean);\n\n// Join into a single string using '|'\nconst locString = locLinks.join('\\n');\n\n// Return as a single n8n item\nreturn [\n  {\n    json: {\n      loc_links: locString\n    }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2400,
        208
      ],
      "id": "9c492a4a-75da-4ee3-8849-34e83a8e9346",
      "name": "make link array to string"
    },
    {
      "parameters": {
        "jsCode": "function extractLinks(raw) {\n  const urlRegex = /\\bhttps?:\\/\\/\\S+/gi;\n  const links = raw.match(urlRegex) || [];\n  const uniqueLinks = [...new Set(links.map(link => link.trim()))];\n  return uniqueLinks.join('\\n'); // single string with \\n separator\n}\n\n// --- n8n entry point ---\nconst rawMarkdown = $input.first().json.results[0].markdown.raw_markdown || '';\nconst linksString = extractLinks(rawMarkdown);\n\n// ✅ Return valid n8n output\nreturn [\n  {\n    json: {\n      links: linksString\n    }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2912,
        624
      ],
      "id": "0a40ad84-137d-4429-8edc-80df679eecee",
      "name": "extract link"
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "gpt-5-nano",
          "mode": "list",
          "cachedResultName": "GPT-5-NANO"
        },
        "messages": {
          "values": [
            {
              "content": "You are a link checker.\nYour task is to analyze a list of links given and select no more than 5 links that are most useful for creating a personalized email.\n\nExamples of useful links:\nsolutions\nservices\nwhat-we-do\nsolutions\ncapabilities\nexpertise\napproach\nmethodology\nour-framework\nhow-we-work\nprocess\ncase-studies\nclients\nindustries\ninsights\nblog\nsuccess-stories\nAbout Us\nCompany Profile\nNews\nVision and Mission\n\nRules:\n\nOnly return absolute URLs (e.g., https://example.com/about-us).\n\nIgnore relative URLs (e.g., /about-us).\n\nDo not return more than 5 links.\n\nOutput format (JSON):\n\n{\n  \"BestLinks\": [\n    \"https://example.com/about-us\",\n    \"https://example.com/services\",\n    \"https://example.com/news\",\n    \"https://example.com/vision-mission\"\n  ]\n}",
              "role": "system"
            },
            {
              "content": "={{ $json.loc_links }}{{ $json.message.content }}{{ $json.links }}"
            }
          ]
        },
        "jsonOutput": true,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        3200,
        400
      ],
      "id": "a6603e84-7029-4c61-b7a6-c2bdfdee5dc3",
      "name": "Links ranking",
      "credentials": {
        "openAiApi": {
          "id": "8814JRU0x3fI9btT",
          "name": "evenkik4"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=http://00.00.00.000:11235/crawl",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"urls\": [\"{{ $json['message.content.BestLinks'] }}\"],\n  \"priority\": 10\n}",
        "options": {}
      },
      "id": "d0d9c975-15cc-4999-8c7a-48d9bb1c7e49",
      "name": "crawl4ai1",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        4000,
        496
      ],
      "retryOnFail": true,
      "alwaysOutputData": true,
      "executeOnce": false,
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        4448,
        304
      ],
      "id": "4c4522be-5cd0-4ecd-aa91-14be3d3a3823",
      "name": "Merge"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "2b5bb36f-a7f8-41c7-8de0-1cd1ad2ea06a",
              "name": "data",
              "value": "={{ $json.results[0].markdown.raw_markdown }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        4224,
        400
      ],
      "id": "264be0b6-5340-44f6-b9fa-26ee354459fe",
      "name": "Edit Fields3"
    },
    {
      "parameters": {
        "chatId": "={{ $('Telegram Trigger').item.json.message.from.id }}",
        "text": "Some links may be broken. If no update is received within the next few minutes, the process will be considered failed.\n",
        "additionalFields": {
          "appendAttribution": false
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        4224,
        592
      ],
      "id": "26c8001f-2ac1-4f9f-b288-19ab5e502d1c",
      "name": "broken links notif",
      "webhookId": "517399ca-8ea0-4f4c-9d73-b5e2fbac6342",
      "credentials": {
        "telegramApi": {
          "id": "w3Cax7qO9QavQmz5",
          "name": "Email Demo EN"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "87306b67-4fa7-4e0c-a6f4-c95d30bd3172",
              "name": "flattext",
              "value": "={{ $json.flatText }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        4896,
        304
      ],
      "id": "a3e83a25-7cd9-44af-9556-bedb2c459992",
      "name": "flattext"
    },
    {
      "parameters": {
        "jsCode": "// --- n8n entry point ---\nconst items = $input.all();\nfunction normalizeMarkdown(raw) {\n  let text = raw\n    .replace(/[*#>`~_]+/g, ' ')\n    .replace(/\\[([^\\]]+)\\]\\([^)]+\\)/g, '$1')\n    .replace(/\\bhttps?:\\/\\/\\S+/gi, '')\n    .replace(/\\|/g, ', ')\n    .replace(/^- /gm, '• ')\n    .replace(/\\s{2,}/g, ' ')\n    .replace(/\\n{2,}/g, '\\n')\n    .trim();\n\n  const lines = text.split('\\n');\n  const sections = [];\n  let current = { title: 'General', content: [] };\n\n  for (const line of lines) {\n    const heading = line.match(/^(?:#+|SECTION:)\\s*(.*)/i);\n    if (heading) {\n      if (current.content.length) sections.push(current);\n      current = { title: heading[1].trim(), content: [] };\n    } else {\n      current.content.push(line.trim());\n    }\n  }\n  if (current.content.length) sections.push(current);\n\n  const structured = sections.map(s => ({\n    section: s.title,\n    text: s.content\n      .join(' ')\n      .replace(/\\s+/g, ' ')\n      .replace(/\\b(the|a|an|this|that|these|those)\\b/gi, '')\n      .trim()\n  }));\n\n  const flatText = structured.map(s => `${s.section}: ${s.text}`).join('\\n\\n');\n\n  return { structured, flatText };\n}\n// Process all items\nconst output = items.map(item => {\n  const rawMarkdown = item?.json?.data || '';\n  const result = normalizeMarkdown(rawMarkdown);\n  return {\n    json: {\n      structured: result.structured,\n      flatText: result.flatText,\n      sectionCount: result.structured.length\n    }\n  };\n});\n\nreturn output;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        4672,
        304
      ],
      "id": "69d2748f-b15d-42ad-a74e-10af8a390641",
      "name": "trim markdown to less token"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "b44d2183-02ee-4413-874e-244aab9ed453",
              "name": "Send_Email",
              "value": "=email@gmail.com",
              "type": "string"
            },
            {
              "id": "ea41bba5-ee38-4acb-bd37-414183747aca",
              "name": "receive_email",
              "value": "={{ $('Edit Fields').item.json.Receive_Email }}",
              "type": "string"
            },
            {
              "id": "af35045d-9756-47bf-8030-94e80f8f27b5",
              "name": "subject_line",
              "value": "={{ $json.message.content.Subject }}",
              "type": "string"
            },
            {
              "id": "bf4310e5-9f18-47ac-82b0-5b3cc2e65951",
              "name": "Body",
              "value": "={{ $json.message.content.Body }}",
              "type": "string"
            },
            {
              "id": "b41c6372-446a-4a9e-bd2d-dc12cd51b84e",
              "name": "Signature",
              "value": "<your email signature>",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        6048,
        304
      ],
      "id": "c111426c-6435-4be5-9fc3-909dd6327635",
      "name": "sender + signature",
      "executeOnce": false,
      "retryOnFail": false,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "fieldsToAggregate": {
          "fieldToAggregate": [
            {
              "fieldToAggregate": "Telegram_id"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        240,
        416
      ],
      "id": "a13c1a7a-a810-40eb-b17b-1758c5092ca5",
      "name": "calculate how many session",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "content": "## Limit how many demo emails can be sent per ID",
        "height": 368,
        "width": 816,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        16,
        256
      ],
      "typeVersion": 1,
      "id": "d5568cdf-5905-4c0e-a078-88693ba27e75",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "content": "## Input Formatting",
        "height": 368,
        "width": 768,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        864,
        256
      ],
      "typeVersion": 1,
      "id": "901a436e-509a-4195-b343-7d25578ad515",
      "name": "Sticky Note2"
    },
    {
      "parameters": {
        "content": "## Extract sublinks from a website",
        "height": 576,
        "width": 2000,
        "color": 2
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1680,
        192
      ],
      "typeVersion": 1,
      "id": "1c8832d8-b1bc-436f-9f3f-47ce4feb8bed",
      "name": "Sticky Note3"
    },
    {
      "parameters": {
        "content": "## Extract content from sublinks\n",
        "height": 560,
        "width": 1920,
        "color": 6
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        3728,
        192
      ],
      "typeVersion": 1,
      "id": "d157a162-804b-46c5-a5c5-9dc57429a420",
      "name": "Sticky Note4"
    },
    {
      "parameters": {
        "content": "## Crafting and sending email\n",
        "height": 288,
        "width": 976
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        5680,
        208
      ],
      "typeVersion": 1,
      "id": "1e7a804d-21cc-4a0d-aa13-587a5772b1a8",
      "name": "Sticky Note5"
    },
    {
      "parameters": {
        "chatId": "={{ $('Telegram Trigger').item.json.message.from.id }}",
        "text": "Done. Please check your email inbox.",
        "additionalFields": {
          "appendAttribution": false
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        6496,
        304
      ],
      "id": "a7b0258e-2f1c-4dca-9a0c-f614cc6251a9",
      "name": "Finish notif",
      "webhookId": "517399ca-8ea0-4f4c-9d73-b5e2fbac6342",
      "credentials": {
        "telegramApi": {
          "id": "w3Cax7qO9QavQmz5",
          "name": "Email Demo EN"
        }
      }
    },
    {
      "parameters": {
        "dataTableId": {
          "__rl": true,
          "value": "lUt0VsvPO063mnyQ",
          "mode": "list",
          "cachedResultName": "demo log",
          "cachedResultUrl": "/projects/ty2N3FKN04d75oM7/datatables/lUt0VsvPO063mnyQ"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "nama": "={{ $('Telegram Trigger').item.json.message.from.first_name }}",
            "Telegram_id": "={{ $('Telegram Trigger').item.json.message.from.id }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "nama",
              "displayName": "nama",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "Telegram_id",
              "displayName": "Telegram_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.dataTable",
      "typeVersion": 1,
      "position": [
        6720,
        304
      ],
      "id": "bcbb5b6d-5344-40ac-ad35-f9df2b83e8f8",
      "name": "insert log"
    },
    {
      "parameters": {
        "content": "## Cleaning log data",
        "height": 224,
        "width": 688
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -416,
        -80
      ],
      "typeVersion": 1,
      "id": "cf96a14b-bdc0-4deb-a464-41f334e5ed89",
      "name": "Sticky Note6"
    }
  ],
  "pinData": {},
  "connections": {
    "Telegram Trigger": {
      "main": [
        [
          {
            "node": "If1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "sitemap.xml request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "Markdown",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "crawl4ai",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Markdown": {
      "main": [
        [
          {
            "node": "getting link",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "getting link": {
      "main": [
        [
          {
            "node": "Links ranking",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out": {
      "main": [
        [
          {
            "node": "HTTP Request1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request1": {
      "main": [
        [
          {
            "node": "Markdown1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "crawl4ai1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Markdown1": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Page Sumarize": {
      "main": [
        [
          {
            "node": "Aggregate",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate": {
      "main": [
        [
          {
            "node": "Email Craft",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Email Craft": {
      "main": [
        [
          {
            "node": "sender + signature",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "Get row(s)1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get row(s)1": {
      "main": [
        [
          {
            "node": "Delete row(s)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If1": {
      "main": [
        [
          {
            "node": "Check how many email created by id",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Edit Fields5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "RAG AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Postgres Chat Memory": {
      "ai_memory": [
        [
          {
            "node": "RAG AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "RAG AI Agent": {
      "main": [
        [
          {
            "node": "answer query",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "List Documents": {
      "ai_tool": [
        [
          {
            "node": "RAG AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Get File Contents": {
      "ai_tool": [
        [
          {
            "node": "RAG AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Query Document Rows": {
      "ai_tool": [
        [
          {
            "node": "RAG AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings OpenAI2": {
      "ai_embedding": [
        [
          {
            "node": "Postgres PGVector Store",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "Postgres PGVector Store": {
      "ai_tool": [
        [
          {
            "node": "RAG AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields5": {
      "main": [
        [
          {
            "node": "RAG AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If2": {
      "main": [
        [
          {
            "node": "notif email creating",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "missing input notif",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send email": {
      "main": [
        [
          {
            "node": "Finish notif",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "XML": {
      "main": [
        [
          {
            "node": "make link array to string",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "sitemap.xml request": {
      "main": [
        [
          {
            "node": "XML",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "sitemap_index.xml request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "sitemap_index.xml request": {
      "main": [
        [
          {
            "node": "XML",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "crawl4ai": {
      "main": [
        [
          {
            "node": "extract link",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check how many email created by id": {
      "main": [
        [
          {
            "node": "calculate how many session",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "set maximum email per id": {
      "main": [
        [
          {
            "node": "apologize message",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Code in JavaScript",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code in JavaScript": {
      "main": [
        [
          {
            "node": "If2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "notif email creating": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "make link array to string": {
      "main": [
        [
          {
            "node": "Links ranking",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "extract link": {
      "main": [
        [
          {
            "node": "Links ranking",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Links ranking": {
      "main": [
        [
          {
            "node": "Split Out",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "crawl4ai1": {
      "main": [
        [
          {
            "node": "Edit Fields3",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "broken links notif",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "trim markdown to less token",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields3": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "flattext": {
      "main": [
        [
          {
            "node": "Page Sumarize",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "trim markdown to less token": {
      "main": [
        [
          {
            "node": "flattext",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "sender + signature": {
      "main": [
        [
          {
            "node": "Send email",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "calculate how many session": {
      "main": [
        [
          {
            "node": "set maximum email per id",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Finish notif": {
      "main": [
        [
          {
            "node": "insert log",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "02ae9cce-1017-4893-a757-1eb590a37c5b",
  "meta": {
    "instanceId": "84f919bdf71e0a8207578f3b6d18e75ace42ed26bca5f98c23187d7c0785bb5b"
  },
  "id": "rUKy8bpD27piXChW",
  "tags": []
}